
Задание:
В данном задании вам будет необходимо настроить панель дашборда для получения информации об использовании памяти на тестовом сервере. В предыдущем задании вы выполнили установку NodeExporter и PrometheusServer.

Произведите установку Grafana с доступностью из интернета и данными для входа в Grafana admin:rebrainme.
Подключите Prometheus как источник данных (datasource).
Создайте дашборд Base metrics с 3 панелями, которые будут демонстрировать нам ключевые аспекты состояния нашего сервера:
отображение свободной памяти;
наличие свободного дискового пространства, в процентном соотношении от общего объема;
отображать субьективную нагрузку на процессор. Для базиса мы возьмем метрику load average за минуту — это LA, однако чтобы данные были обьективными, нам нужно эту метрику разделить на общее количество ядер, а затем умножить на 100.
В ответе предоставьте 3 запроса, которые вы использовали для построения панелей в 3 пункте задания, а также ссылку для доступа к Grafana.


****************************************************************************
Решение
****************************************************************************
Ефошкин Максим Вячеславович
ОТПРАВЛЕНО
29.08.2022 11:56
1. Установка
Graphana
address: 51.250.97.86
Prometheus
address: 158.160.9.201


# Установка Гарафаны
sudo yum install grafana-enterprise-9.1.1-1.x86_64.rpm


sudo apt-get install -y apt-transport-https
sudo apt-get install -y software-properties-common wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -

echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list

sudo apt-get update
sudo apt-get install grafana

sudo systemctl daemon-reload
sudo systemctl start grafana-server
sudo systemctl status grafana-server
sudo systemctl enable grafana-server.service

http://51.250.97.86:3000/login
2. Ставим node-exporter

mkdir /opt/node-exporter
cd /opt/node-exporter
wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
tar zxvf node_exporter-*.linux-amd64.tar.gz
cd node*
cp node_exporter /usr/local/bin/

useradd --no-create-home --shell /bin/false nodeusr
chown -R nodeusr:nodeusr /usr/local/bin/node_exporter

vi /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter Service
After=network.target

[Service]
User=nodeusr
Group=nodeusr
Type=simple
ExecStart=/usr/local/bin/node_exporter
ExecReload=/bin/kill -HUP $MAINPID
Restart=on-failure

[Install]
WantedBy=multi-user.target

systemctl daemon-reload
systemctl enable node_exporter
systemctl start node_exporter

Проверка
http://51.250.97.86:9100/metrics



# Цепляем экспортер к прометеусу
ssh 158.160.9.201
vi /etc/prometheus/prometheus.yml

global:

alerting:
  alertmanagers:
    - static_configs:
        - targets:
				
rule_files:

scrape_configs:
  - job_name: "prometheus"

    static_configs:
      - targets: ["158.160.9.201:9090"]
			
	# Добавил node exporter
  - job_name: 'node_exporter_grafana'
    scrape_interval: 5s
    static_configs:
      - targets: ['51.250.97.86:9100']

#Добавил netdata
  - job_name: "netdata-scrape"
    metrics_path: '/api/v1/allmetrics'
    scrape_interval: 10s
    params:
      format: [prometheus]
    honor_labels: true

    static_configs:
      - targets: ["158.160.9.201:19999"]
root@epdjuho3lg16rds2ae0l:/opt/prometheus-2.38.0.linux-amd64# 

systemctl restart prometheus

Проверка прометея, добавил нетдата, прометей , и нод экспортер с гарафаны
http://158.160.9.201:9090/
node-exporter
http://51.250.97.86:9100/metrics
grafana
http://51.250.97.86:3000/
Отчет

Free Memory ( отображение свободной памяти; ):
node_memory_MemFree_bytes{instance="51.250.97.86:9100"} / 1024 / 1024

Free disk space in % ( наличие свободного дискового пространства, в процентном соотношении от общего объема; ):

round(node_filesystem_avail_bytes{instance="51.250.97.86:9100", fstype="ext4"}/node_filesystem_size_bytes{instance="51.250.97.86:9100", fstype="ext4"} * 100)

CPU ( отображать субьективную нагрузку на процессор. Для базиса мы возьмем метрику load average за минуту — это LA, однако чтобы данные были обьективными, нам нужно эту метрику разделить на общее количество ядер, а затем умножить на 100.):

node_load1{instance="51.250.97.86:9100"} / 2 * 100

http://51.250.97.86:3000/
ОТВЕТ КУРАТОРА
Алексей Кузнецов (@Hystrix)
ВЫПОЛНЕНО 5
30.08.2022 07:02
Добрый день!

Отлинчые знание темы и выполнение задания, замечаний и вопросов нет!





*****************************************************************************
Теория
*****************************************************************************


LNXA-05 04: Monitoring. Grafana
Описание:
Недостатком Prometheus, с которым мы познакомились в предыдущем задании, является невозможность сохранить собранные графики в удобоваримый вариант, с которым можно работать. К счастью, для решения таких задач существует прекрасный многофункциональный инструмент визуализации с функциями мониторинга — Grafana.

Grafana является open source решением для визуализации и анализа данных. Благодаря своей гибкости и вариативности источников данных (они же Datasource — в терминах Grafana — Elasticsearh, Prometheus, InfluxDB, другие сервисы, в том числе базы данных), она давно стала стандартом отрасли. Для каждого источника данных есть настраиваемый редактор запросов и специальный синтаксис. Если вы используете Grafana в качестве визуализации данных на основе метрик Prometheus (крайней популярная связка), то сообщество может предоставить вам огромный выбор информативных готовых сборок с метриками (дашборды) на основе собираемых метрик для огромного множества обьектов.

Dashboard — собственно, является набором отдельных панелей — базовых элементов визуализации. Вы можете выстраивать графики, статусы, таблицы и даже тепловые карты кликов (актуально для web-бизнеса). Размер, положение, настройка этих элементов — полностью в руках пользователей, таким образом вы можете визуализировать данные максимально удобно для конкретной ситуации.

Также популярностью пользуется связка Grafana + Graylog/EFK, позволяя на основании данных, получаемых из журналов записей приложений, выстраивать подробную визуализацию — распределение запросов по путям, запрашиваемым пользователями, со средним временем ответа или визуализация 500-х ошибок, что позволяет быстро получить информацию о уязвимых местах вашего веб-проекта и оперативно организовывать работы по исправлению выявленных проблем.

Дополнительно можно отметить возможность отображать на одной визуальной панели данные из нескольких источников. Скажем, есть несколько экземпляров вашего приложения и вы можете оценивать метрики, собираемые с них, как в разрезе каждого элемента, так и все вместе, что может очень помочь при анализе.

Конечно, выстраивание полноценной системы мониторинга, покрывающей большую часть ваших требований, — задача непростая и редко имеющая логичный этап завершения. Зачастую после покрытия инфраструктуры инструментами, собирающими метрики и журналы приложений, вы визуализируете минимальный набор данных, а в процессе эксплуатации, в ходе появляющихся и изменяющихся требований как со стороны бизнеса в целом, так и со стороны разных аспектов эксплуатации, вы будете непрерывно добавлять/изменять дашборды для возможности анализа более тонких и ситуативных моментов.
