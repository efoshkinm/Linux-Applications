Задание:
Сгенерируйте ключ при помощи флага --gen-key (команды и вывод сохраните)
Выведете список публичных и приватных ключей (команды и вывод сохраните)
У созданного ключа удалите дату истечения (команды и вывод сохраните)
Выведете список публичных и приватных ключей (команды и вывод сохраните)
Экспортируйте публичный ключ в файл в ASCII формате и выведете его (команды и вывод сохраните)
Экспортируйте приватный в бинарном виде в файл (команду и вывод сохраните)
Зашифруйте строку RebrainMe Linux ASYM при помощи сгенерированного ключа в ASCII формате и выведете этот файл (команды и вывод сохраните)
Зашифруйте файл с приватным ключем при помощи passphrase secret в ASCII формате и выведете этот файл (команды и вывод сохраните)
Удалите из вашего хранилища публичный и приватный ключ (команды и вывод сохраните)
Выведете список публичных и приватных ключей (команды и вывод сохраните)
Расшифруйте приватный ключ и импортируйте одной командой (команды и вывод сохраните)
Выведете список публичных и приватных ключей (команды и вывод сохраните)
Расшифруйте файл с зашифрованной строкой (команды и вывод сохраните)
Отправьте на проверку все сохраненные выводы



****************************************************************************
Решение
****************************************************************************

Ефошкин Максим Вячеславович
ОТПРАВЛЕНО
02.11.2022 09:59
1. Сгенерируйте ключ при помощи флага --gen-key (команды и вывод сохраните)
[m.efoshkin@fedora gnupg]$ gpg --gen-key
gpg (GnuPG) 2.3.7; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

gpg: directory '/home/m.efoshkin/.gnupg' created
gpg: keybox '/home/m.efoshkin/.gnupg/pubring.kbx' created
Note: Use "gpg --full-generate-key" for a full featured key generation dialog.

GnuPG needs to construct a user ID to identify your key.

Real name: Max
Email address: m.efoshkin@yandex.ru
You selected this USER-ID:
    "Max <m.efoshkin@yandex.ru>"

Change (N)ame, (E)mail, or (O)kay/(Q)uit? O
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: /home/m.efoshkin/.gnupg/trustdb.gpg: trustdb created
gpg: directory '/home/m.efoshkin/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/m.efoshkin/.gnupg/openpgp-revocs.d/96609B3C34BD9AA921243508D270B9837D51C792.rev'
public and secret key created and signed.

pub   ed25519 2022-11-02 [SC] [expires: 2024-11-01]
      96609B3C34BD9AA921243508D270B9837D51C792
uid                      Max <m.efoshkin@yandex.ru>
sub   cv25519 2022-11-02 [E] [expires: 2024-11-01]

passphrase: Moscow

2. Выведете список публичных и приватных ключей (команды и вывод сохраните)
[m.efoshkin@fedora gnupg]$  gpg --list-keys
gpg: checking the trustdb
gpg: marginals needed: 3  completes needed: 1  trust model: pgp
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
gpg: next trustdb check due at 2024-11-01
/home/m.efoshkin/.gnupg/pubring.kbx
-----------------------------------
pub   ed25519 2022-11-02 [SC] [expires: 2024-11-01]
      96609B3C34BD9AA921243508D270B9837D51C792
uid           [ultimate] Max <m.efoshkin@yandex.ru>
sub   cv25519 2022-11-02 [E] [expires: 2024-11-01]

[m.efoshkin@fedora gnupg]$ gpg --list-secret-keys
/home/m.efoshkin/.gnupg/pubring.kbx
-----------------------------------
sec   ed25519 2022-11-02 [SC] [expires: 2024-11-01]
      96609B3C34BD9AA921243508D270B9837D51C792
uid           [ultimate] Max <m.efoshkin@yandex.ru>
ssb   cv25519 2022-11-02 [E] [expires: 2024-11-01]

[m.efoshkin@fedora gnupg]$ 

3. У созданного ключа удалите дату истечения (команды и вывод сохраните)
[m.efoshkin@fedora gnupg]$ gpg --edit-key max
gpg (GnuPG) 2.3.7; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

sec  ed25519/D270B9837D51C792
     created: 2022-11-02  expires: 2024-11-01  usage: SC  
     trust: ultimate      validity: ultimate
ssb  cv25519/BBC179E67BB08E53
     created: 2022-11-02  expires: 2024-11-01  usage: E   
[ultimate] (1). Max <m.efoshkin@yandex.ru>

gpg> expire 
Changing expiration time for the primary key.
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 
Key does not expire at all
Is this correct? (y/N) y

sec  ed25519/D270B9837D51C792
     created: 2022-11-02  expires: never       usage: SC  
     trust: ultimate      validity: ultimate
ssb  cv25519/BBC179E67BB08E53
     created: 2022-11-02  expires: 2024-11-01  usage: E   
[ultimate] (1). Max <m.efoshkin@yandex.ru>

gpg> 


4. Выведете список публичных и приватных ключей (команды и вывод сохраните)
gpg> list 

sec  ed25519/D270B9837D51C792
     created: 2022-11-02  expires: never       usage: SC  
     trust: ultimate      validity: ultimate
ssb  cv25519/BBC179E67BB08E53
     created: 2022-11-02  expires: 2024-11-01  usage: E   
[ultimate] (1). Max <m.efoshkin@yandex.ru>

gpg> save

[m.efoshkin@fedora gnupg]$ gpg --list-secret-keys
/home/m.efoshkin/.gnupg/pubring.kbx
-----------------------------------
sec   ed25519 2022-11-02 [SC]
      96609B3C34BD9AA921243508D270B9837D51C792
uid           [ultimate] Max <m.efoshkin@yandex.ru>
ssb   cv25519 2022-11-02 [E] [expires: 2024-11-01]

[m.efoshkin@fedora gnupg]$  gpg --list-keys
/home/m.efoshkin/.gnupg/pubring.kbx
-----------------------------------
pub   ed25519 2022-11-02 [SC]
      96609B3C34BD9AA921243508D270B9837D51C792
uid           [ultimate] Max <m.efoshkin@yandex.ru>
sub   cv25519 2022-11-02 [E] [expires: 2024-11-01]

5. Экспортируйте публичный ключ в файл в ASCII формате и выведете его (команды и вывод сохраните)
[m.efoshkin@fedora gnupg]$ gpg --armor --export max
-----BEGIN PGP PUBLIC KEY BLOCK-----

mDMEY2H8wxYJKwYBBAHaRw8BAQdAeDjzS1UQhpW/YqGF4+prJHg45M6JsYwapuzr
zCa5+zi0Gk1heCA8bS5lZm9zaGtpbkB5YW5kZXgucnU+iJMEExYKADsCGwMFCwkI
BwICIgIGFQoJCAsCBBYCAwECHgcCF4AWIQSWYJs8NL2aqSEkNQjScLmDfVHHkgUC
Y2H/8AAKCRDScLmDfVHHkkMeAP90zpj8DWjPZ39ilI5jGZhlIv8Y7rLH7AMX4SXL
uMsejgD7BPwo/C+Wmq7793WWq8rAew0kFk5boM9Han3tLwgPfAC4OARjYfzDEgor
BgEEAZdVAQUBAQdAaCMOQSK8GAncJUwlD0Q0o5/FQD851NVHcZJFP3JAuSQDAQgH
iH4EGBYKACYWIQSWYJs8NL2aqSEkNQjScLmDfVHHkgUCY2H8wwIbDAUJA8JnAAAK
CRDScLmDfVHHkrSpAQDW+4Wtq0kN76ufca51g1NaCyaueEo8CYb7Jux6jNx+lgEA
u8hqdcQ8wJHxeukbmlux3OqpeRVQfU+SEmMbo3mw/QM=
=0g8M
-----END PGP PUBLIC KEY BLOCK-----
[m.efoshkin@fedora gnupg]$ 

6. Экспортируйте приватный в бинарном виде в файл (команду и вывод сохраните)
[m.efoshkin@fedora .gnupg]$ gpg  --export-secret-keys max > priv.key
[m.efoshkin@fedora .gnupg]$ cat priv.key 
5�m/�Y���^C��$0w*u�2�л��si��{�����´�Max <m.efoshkin@yandex.ru>���B}�M�
;
 	
	
       !�`�<4���!$�p��}Qǒca��
$N[��Gj}�|��ca��˸����(�/�����u����{
+�U@h#A"�	�%L%D4���@?9��Gq�E?r@��+E���� ��g5_r�!���eD8���s�Zb�-������vs��a����Tz}�C\��c�i��	f��$��uO��~
&!�`�<4���!$�p��}Qǒca��
                       	g
﫟q�u�SZ�p��}Qǒ�������I
        &�xJ<	��&�z��~���ju�<���z�[���yP}O�cy��[m.efoshkin@fedora .gnupg]$ 

7. Зашифруйте строку RebrainMe Linux ASYM при помощи сгенерированного ключа в ASCII формате и выведете этот файл (команды и вывод сохраните)
echo 'RebrainMe Linux ASYM' > doc
[m.efoshkin@fedora .gnupg]$ gpg --recipient m.efoshkin@yandex.ru --encrypt --armor doc
[m.efoshkin@fedora .gnupg]$

[m.efoshkin@fedora .gnupg]$ cat doc.asc 
-----BEGIN PGP MESSAGE-----

hF4Du8F55nuwjlMSAQdADfHaIL6Y9rJyoVZ9nR6puqxl2yu5L5pbxmohC84uHXsw
tmkOvt/vloM0u5hIabirP88NYYCwSYRZ260li32e+HJedoOvFV/11tBNArjTjdQ0
1F0BCQIQeV4QwTo62w6WNRTpbqjcRy+3ZD6t0MUDudxda1qGR1TBleh44uG2W05O
8/FzoKmr0SRVYZvooUTko1ETq5ziZ3UL4HkUVvBfuDR+gvcFu3H96COVtBJyMmk=
=QHRT
-----END PGP MESSAGE-----
[m.efoshkin@fedora .gnupg]$ 

8. Зашифруйте файл с приватным ключем при помощи passphrase secret в ASCII формате и выведете этот файл (команды и вывод сохраните.
[m.efoshkin@fedora .gnupg]$ gpg --armor --export-secret-keys  max > priv_ascii.key
[m.efoshkin@fedora .gnupg]$ cat priv_ascii.key 
-----BEGIN PGP PRIVATE KEY BLOCK-----

lIYEY2H8wxYJKwYBBAHaRw8BAQdAeDjzS1UQhpW/YqGF4+prJHg45M6JsYwapuzr
zCa5+zj+BwMCsAgHDcE+QWP46ChgfryY2ixvhU30d2I77ZWelD00JbB/J23O6nYu
9Mc7CZDM3Scu/++pSOs3xixMIsL9YpGBf1UIBpnHUAylIiZ9+OTJtLQaTWF4IDxt
LmVmb3Noa2luQHlhbmRleC5ydT6IkwQTFgoAOwIbAwULCQgHAgIiAgYVCgkICwIE
FgIDAQIeBwIXgBYhBJZgmzw0vZqpISQ1CNJwuYN9UceSBQJjYf/wAAoJENJwuYN9
UceSQx4A/3TOmPwNaM9nf2KUjmMZmGUi/xjussfsAxfhJcu4yx6OAPsE/Cj8L5aa
rvv3dZarysB7DSQWTlugz0dqfe0vCA98AJyLBGNh/MMSCisGAQQBl1UBBQEBB0Bo
Iw5BIrwYCdwlTCUPRDSjn8VAPznU1UdxkkU/ckC5JAMBCAf+BwMCjM9srplwgQb4
An/rrCGrHhEpdONVaSRX+YgUkK+wvAIlIdw/dCYxmVQGReN9N0bDAr6T86WfvGjI
dIaQg09JAPOg0oBMmoqpoDrhfAnuA4h+BBgWCgAmFiEElmCbPDS9mqkhJDUI0nC5
g31Rx5IFAmNh/MMCGwwFCQPCZwAACgkQ0nC5g31Rx5K0qQEA1vuFratJDe+rn3Gu
dYNTWgsmrnhKPAmG+ybseozcfpYBALvIanXEPMCR8XrpG5pbsdzqqXkVUH1PkhJj
G6N5sP0D
=To+2
-----END PGP PRIVATE KEY BLOCK-----
[m.efoshkin@fedora .gnupg]$ 

[m.efoshkin@fedora .gnupg]$ gpg --symmetric priv_ascii.key 
[m.efoshkin@fedora .gnupg]$ cat priv_ascii.key.gpg 
��67�e����71E��J{ >�Y\��
��-�B﫸��e0��@�LAXI:tR��<�-��b��� �u�
                                     ��ˡ��|E�&ڮ$��Q��1�׳a-Un4��cW����iO�
�I��$RK��ʻ�d솫�Oo[\���<�j�
                          +
F�Y�EuB}�Y�:��a|�ٔ�D�O��x���ԗP3����,��b��Ju.�[���즙f�N�Y���]m�R�O>�P�C���J��Ll�r]���A�Y���m����
��T��M�7 b
          �}�@'��D"�-e(���|�G�঺&��Xy�1H|�̬
�N�M-�ؿ]�+�B�;��M����E�����6�9~�w���ߗ���'���}���脂�,��l��dG'L(�JdX7<y6yޜ�gz�,
                                                                             �Q6j���6@'·��A�g�i�����
              �t��2`ś�z?���4� HB� N#*=�#xc
VEk�!P(�/�
�dt��oqr�/"�2ʦ�S����>�e�AFݥfl�l�nWj��mf�t�HM�����*���Fp�{1��TZҨ
                                                               �S�s,�����ţ���=,Q�=܋a�qj �Z�WJd m�3xX�ך�)�H%��.�1=�E
                             ;���,��[m.efoshkin@fedora .gnupg]$ 

9. Удалите из вашего хранилища публичный и приватный ключ (команды и вывод сохраните)
[m.efoshkin@fedora .gnupg]$ gpg --delete-secret-keys max
gpg (GnuPG) 2.3.7; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


sec  ed25519/D270B9837D51C792 2022-11-02 Max <m.efoshkin@yandex.ru>

Delete this key from the keyring? (y/N) y
This is a secret key! - really delete? (y/N) y
[m.efoshkin@fedora .gnupg]$ 

[m.efoshkin@fedora .gnupg]$ gpg --delete-keys max
gpg (GnuPG) 2.3.7; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  ed25519/D270B9837D51C792 2022-11-02 Max <m.efoshkin@yandex.ru>

Delete this key from the keyring? (y/N) y
[m.efoshkin@fedora .gnupg]$ 


10. Выведете список публичных и приватных ключей (команды и вывод сохраните)
[m.efoshkin@fedora .gnupg]$ gpg --list-keys
gpg: checking the trustdb
gpg: no ultimately trusted keys found
[m.efoshkin@fedora .gnupg]$ gpg --list-secret-keys
[m.efoshkin@fedora .gnupg]$ 

11. Расшифруйте приватный ключ и импортируйте одной командой (команды и вывод сохраните)
[m.efoshkin@fedora .gnupg]$ gpg --output recovered.key --decrypt priv_ascii.key.gpg && gpg --import recovered.key
gpg: AES256.CFB encrypted data
gpg: encrypted with 1 passphrase
gpg: key D270B9837D51C792: public key "Max <m.efoshkin@yandex.ru>" imported
gpg: warning: lower 3 bits of the secret key are not cleared
gpg: key D270B9837D51C792: secret key imported
gpg: Total number processed: 1
gpg:               imported: 1
gpg:       secret keys read: 1
gpg:   secret keys imported: 1
[m.efoshkin@fedora .gnupg]$ 

12. Выведете список публичных и приватных ключей (команды и вывод сохраните)
[m.efoshkin@fedora .gnupg]$ gpg --list-keys 
/home/m.efoshkin/.gnupg/pubring.kbx
-----------------------------------
pub   ed25519 2022-11-02 [SC]
      96609B3C34BD9AA921243508D270B9837D51C792
uid           [ unknown] Max <m.efoshkin@yandex.ru>
sub   cv25519 2022-11-02 [E] [expires: 2024-11-01]

[m.efoshkin@fedora .gnupg]$ gpg --list-secret-keys 
/home/m.efoshkin/.gnupg/pubring.kbx
-----------------------------------
sec   ed25519 2022-11-02 [SC]
      96609B3C34BD9AA921243508D270B9837D51C792
uid           [ unknown] Max <m.efoshkin@yandex.ru>
ssb   cv25519 2022-11-02 [E] [expires: 2024-11-01]

[m.efoshkin@fedora .gnupg]$ 

13. Расшифруйте файл с зашифрованной строкой (команды и вывод сохраните)
[m.efoshkin@fedora .gnupg]$ gpg --output recovered_doc --decrypt doc.asc 
gpg: encrypted with cv25519 key, ID BBC179E67BB08E53, created 2022-11-02
      "Max <m.efoshkin@yandex.ru>"

[m.efoshkin@fedora .gnupg]$ cat recovered_doc 
RebrainMe Linux ASYM
[m.efoshkin@fedora .gnupg]$
`

ОТВЕТ КУРАТОРА
Алексей Кузнецов (@Hystrix)
ВЫПОЛНЕНО 5
02.11.2022 10:36
Добрый день!

Отличные знание темы и выполнение задания, замечаний и вопросов нет!


*****************************************************************************
Теория
*****************************************************************************


LNXA-08 01: Infrastructure. GPG
Описание:
Ранее мы уже разобрали, что HTTPS используется для шифрования трафика между клиентом (скажем, браузером) и сервером, но, как не сложно догадаться, данный протокол покрывает передачу данных только по протоколу HTTP. Для других протоколов существуют другие реализации шифрования, которые, часто, для создания безопасного соединения используют все тот же TLS. Однако существует и другой инструмент, который создавался для шифрования отправляемых сообщений - PGP (Pretty Good Privacy) и его открытая реализация - GPG (GnuPG - GNU Privacy Guard), о котором мы и поговорим в этом задании

Начнем, как обычно, с короткой исторической справки. Для этого обратимся на секунду к странице на Wikipedia о PGP:

PGP - компьютерная программа, также библиотека функций, позволяющая выполнять операции шифрования и цифровой подписи сообщений, файлов и другой информации, представленной в электронном виде, в том числе прозрачное шифрование данных на запоминающих устройствах, например, на жёстком диске.

Из этого можно сделать вывод, что при помощи PGP можно производить следующие операции:

шифровать данные
подписывать данные
При этом данные могут быть представлены как файлами (как текстовыми, так и бинарными), так и текстом (скажем, текстом электронного письма)

Данная программа изначальна была создана с целью отправки зашифрованных сообщений через BBS (Bulletin Board System — электронная доска объявлений) и для хранения данных в шифрованном виде их разработчиком - Филиппом Циммерманом - в ходе его движения против ядерной энергии в начале 90-х годов. В последствии же данная программа была распространена в открытом виде для использования кем угодно. Однако из-за разночтений ранних реализаций данного инструмента, в 1997 году компания PGP Inс., ответственная на тот момент за разработку этого инструмента, предложила стандарт OpenPGP, который детально описывал, как должны работать реализации для взаимной совместимости. Данный стандарт был принят IETF как RFC4880. На базе этого протокола был создан инструмент GNU Privacy Guard (GnuPG/GPG), который и поставляется во всех современных дистрибутивах. На данный момент актуальной мажорной версией утилиты является вторая версия, из-за чего иногда можно встретить указание GPG2, но в реальности команда для работы с GPG осталась одна - gpg

Протокол PGP подразумевает использование ассимметричных, симметричных алгоритмов шифрования, а также использование алгоритмов сжатия. Протоколы шифрования используются для тех же целей, что и в TLS - шифрование данных и создание цифровых подписей. И, ровно как в случае с TLS, при установке сессии с другим клиентом, ассиметричная пара ключей используется для шифрования сессионного ключа, который используется для общения по симметричному алгоритму шифрования. Однако PGP позволяет кроме того шифровать и произвольные данные, такие как файлы, при помощи ассиметричных ключей, что позволяет организовывать защищенный обмен и хранение данных в зашифрованном виде. К примеру, данная возможность используется в утилите для снятия бекапов с баз WAL-G с целью шифрования бекапов при помощи публичного ключа перед их сохранением в шифрованном виде. При такой схеме для разворачивания бекапа требуется наличие приватного ключа у пользователя, от имени которого запускается данная утилита

GPG подразумевает 2 схемы работы - через сертификаты (по аналогии с TLS), а также через так называемую сеть доверия, которая подразумевала, что для корректной работы с другим человеком вам нужно получить от него публичный ключ и добавить в свой keychain и только тогда - расшифровать сообщения от данного пользователя. Хотя данный подход к организации инфраструктуры управления открытыми ключами и позволяет обеспечить децентрализованную защищенную систему для общения между клиентами, широкого распространения она не получила

Теперь разберемся с самой утилитой gpg и что мы можем с ней сделать

Генерация ключей
Как мы описали выше, GPG подразумевает использование ассиметричных ключей для своей работы. Каждый ключ в GPG привязан к определенному человеку. Чаще всего - к его адресу электронной почты, как универсальному идентификатору. В gpg для генерации пары ключей существует несколько разных команд для генерации ключей. Начнем с более общей

--full-generate-key / --full-gen-key - позволяет в интерактивном режиме задать все параметры создаваемого ключа:

Какого типа ключ требуется создать - позволяет определить, для каких целей будет походить ключ (для всех целей или только для подписей)
Какой длины ключ должен быть создан - данный параметр влияет на криптоустойчивость ключа, а также сколько энтропии может понадобиться на генерации ключа (на ноутбуках это не так ощущается, но на серверах длинные ключи могут генерироваться очень долго)
Сколько времени будет валиден ключ - актуально, к примеру, для временного ключа, который используется для подписи. На этом этапе можно сделать ключ, который не истечет
Имя пользователя
E-Mail пользователя
Комментарий к ключу - необязательное поле
После этого производится ввод парольной фразы (passphrase) - пароля, который будет запрашиваться при использовании ключа. Можно оставить данное поле пустым, тогда пароль не будет установлен

Частным случаем данной команды является --generate-key / --gen-key - она генерирует пару ключей с длиной ключей в 2048 байт, который истечет через год и может использоваться для всех целей. В ходе создания ключа будет запрошено только имя, e-mail и passphrase

Все ключи хранятся в домашнем каталоге ~/.gnupg, однако, как правило, обращение к ключам производится через утилиту, а не напрямую

Вывод ключей публичных и приватных
Для вывода публичных ключей в вашем хранилище (или keyring) используется флаг --list-keys или, в сокращении, -k. Пример вывода:

$ gpg -k
/home/dolan/.gnupg/pubring.kbx
pub   rsa4096 2017-02-22 [SCEA]
      9DC858229FC7DD38854AE2D88D81803C0EBFCD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]

pub   rsa2048 2020-07-01 [SC] [expires: 2022-07-01]
      54BB9ED7ED3584A911143D0416901E2B8AB7C492
uid           [ultimate] test@user.com <test@user.com>
sub   rsa2048 2020-07-01 [E] [expires: 2022-07-01]

pub   rsa2048 2020-07-01 [SC]
      0A2314DCBF13E2068D465521ABFA559546CFCD04
uid           [ultimate] qwerty <qwerty@name.co>
sub   rsa2048 2020-07-01 [E]
Из этого вывода можно увидеть 3 ключа - первый был импортирован вручную для apt репозитория, второй был создан с флагом --gen-key, а третий - с --full-gen-key

Для вывода имеющихся приватных ключей используется ключ --list-secret-keys или его сокращенная форма - -K:

$ gpg --list-secret-keys
/home/dolan/.gnupg/pubring.kbx
sec   rsa2048 2020-07-01 [SC] [expires: 2022-07-01]
      54BB9ED7ED3584A911143D0416901E2B8AB7C492
uid           [ultimate] test@user.com <test@user.com>
ssb   rsa2048 2020-07-01 [E] [expires: 2022-07-01]

sec   rsa2048 2020-07-01 [SC]
      0A2314DCBF13E2068D465521ABFA559546CFCD04
uid           [ultimate] qwerty <qwerty@name.co>
ssb   rsa2048 2020-07-01 [E]
Как видете, вывод отличается от вывода с публичными ключами тем, что в нем отсутствует приватный ключ, так как мы импортировали только публичную часть ключа, которая используется для подтверждения подписей

Экспорт ключей
Для того, чтобы передать другому человеку свой публичный ключ, его сперва нужно экспортировать из своего хранилища. Для этого используется флаг --export с передачей идентификатора ключа, e-mail или даже имени пользователя ключа, к которому привязан ключ. Так, к примеру, для экспорта последнего ключа можно использовать следующие команды:

gpg --export 0A2314DCBF13E2068D465521ABFA559546CFCD04
gpg --export qwerty
gpg --export qwerty@name.co
Одно но - данный файл экпортирует в бинарном виде, который можно сохранить через перенаправление потока, но не скопировать текстом. Для того, чтобы можно было это передать, в читаемом и копируемом виде, можно воспользоваться флагом --armor, который переводит бинарные данные в символьное представление, которое уже можно копировать:

$ gpg --armor --export qwerty
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBF78gQ0BCADIi+tUIsHOgdQsDoYVXL7WIs0LgN4s88Wai8U/tg0px4Gs4UJe
DcHicFfCN46XUtUE1LV9vqpQhK/r33V4VUitvxi0XWlyY8Y4z/Ue+qBB9x6LzW7s
0xNNZ/1Y1g8gFoAUik3lRe2Hu23RDiZtHNNq04xUz+w12a86R2zElRo+s+PjxC8/
jgq3YcIQUyk1lBHTIDV+pUeD8OA2jzSkLfBYTJiyzQw1WXZAPu2nx5hOO7irl7Nb
3QzKDKaOASGnGn7tLwDs880nPXSkqEsrpMWnQ+V2ZG0nloaL32uKndKxIEIGSEdx
NvHASyy3XYpbkFX1EeyEPLxNZ5WvIJWiCKY1ABEBAAG0F3F3ZXJ0eSA8cXdlcnR5
QG5hbWUuY28+iQFOBBMBCAA4FiEECiMU3L8T4gaNRlUhq/pVlUbPzQQFAl78gQ0C
GwMFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQq/pVlUbPzQT/0wf+OAF0VZ4L
/rNDlwkzT3vcHaL0r35dkz4xB8xR2dJ4/S83B5vG7I+6HCCWUXTK78rFDInVQr19
f2e404iqE5fSN4+8ntQbdm+T1nWWAJvA/z5JJjrF4eJpqZJHDGfDIRoJtuyelsxZ
4j8iQuwBDIIvtgAkI6MWAcOW5xrDq/wtjmPTFC1KZh1E/rA+nDQUlvFW0Wm5mmRB
z3WYfL3QX26+cwH8JlqMB2Kg7wowepB2/ssG9SpXoCEg4v2T1WbRF9N3giA3K9O9
cyxU4ggXY3OrDy8B+MXqqgldXs4Ugnsd8tDEFwN6AKRHEFQR313Grdw6bRivHGJJ
7TuvXm30d2OyLLkBDQRe/IENAQgAvdYytjHxvyC13PXcUK+WJxF0+Wiu0+UbX+wV
OHuYYBjHtfAmjnXOAxCLLsuF8ev6vTWaMCrKdE6nC3gVwSJQL/2ga085IolN3vLg
ldfQVSHDUEXEsbj8pAlnZd6NkZs0GJjC6dECT6/nS4hLip/d1/KNsJ/XYnNDCTAq
dyH4P6Dpct6iNiMPeKT28IzckyDl9CZEDWcpVotuu8EmMvcxZJMmX+2kdMmI6BFm
CO3PnAdRzsLk4wymx97zjfu8C/Xt6lIwXhjDaY8Bg0XYPCFcJNmLWyzE4ICuJdW0
S61VaNfLj8QrJaSvDv5OIICOpHye+LnmLdBxBeyjx00tBIvnXQARAQABiQE2BBgB
CAAgFiEECiMU3L8T4gaNRlUhq/pVlUbPzQQFAl78gQ0CGwwACgkQq/pVlUbPzQTM
PggAsY85ztfHapc66qrMmF1iCI81eQJsj6J4ylQWrGMKhg5UYq+yDXdHUsSEQ4AH
0kbQPWIu5Op8ZOfPRWOZCrQhcu1UNME+dQ54Me5HXuJmsm9NbXhgPrcM8mnFNyPP
XS3MWwfCHk7FGSWCYvQAcJUSeLdZfbVGbLhaGfitpc/P9GrzfNcgThOl66Atixyc
mXnrIxSsHxV3uh8PkGYQzKWcwYO9Xj82DeZtYGjwjQhn2bn5jjHoRPOQu356+LF1
tbdMoPsjI8msiD3gjKKCbCLGDr8+UtT/pRN0RN9BDNS/1w7IuR1skeJ6y6tstjkQ
TcoJc0IrlS0i7ONNEkeXvS4Zcw==
=azb7
-----END PGP PUBLIC KEY BLOCK-----
В данном выводе важны заголовок, последняя строка и вторая пустая строка - их наличие означает, что файл валидно экспортирован (хотя пустая строка может показаться странной)

Если же требуется экспортировать приватный ключ, стоит использовать вместо ключа --export ключ --export-secret-keys. Формат вывода будет отличаться, размер ключа - тоже, но в в остальном все работает абсолютно также

Импорт ключей
В случае же, если вам передали ключ, то для работы с ним вам требуется его импортировать. Для этого используется флаг --import, которому требуется передать имя файла, либо его можно использовать через | для импорта из потока ввода. Вывод данной команды сообщит, какие сущности были импортированы:

$ gpg --import /tmp/qwerty
gpg: key ABFA559546CFCD04: "qwerty <qwerty@name.co>" not changed
gpg: key ABFA559546CFCD04: secret key imported
gpg: Total number processed: 1
gpg:              unchanged: 1
gpg:       secret keys read: 1
gpg:   secret keys imported: 1
В случае же, если данный ключ у вас уже добавлен, утилита вам об этом сообщит:

$ gpg --import /tmp/qw
gpg: key ABFA559546CFCD04: "qwerty <qwerty@name.co>" not changed
gpg: key ABFA559546CFCD04: secret key imported
gpg: Total number processed: 1
gpg:              unchanged: 1
gpg:       secret keys read: 1
gpg:  secret keys unchanged: 1
Удаление ключей
Если же вы хотите удалить ваш ключ из хранилища, можно воспользоваться флагами --delete-keys, --delete-secret-keys и --delete-secret-and-public-keys для удаления только приватного, только публичного или обоих ключей соответственно. При удалении gpg несколько раз уточнит у вас, уверенны ли вы в своем действии, так как то, что удалено, возвращению не подлежит

Изменение ключей
Имея приватный и публичные ключи, вы можете изменять некоторые параметры ключа, в интерактивном режиме при помощи ключа --edit-key. К примеру - для удалить дату истечения действия ключа или установить/удалить passphrase. Пример входа в редактор:

$ gpg --edit-key 54BB9ED7ED3584A911143D0416901E2B8AB7C492
gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

sec  rsa2048/16901E2B8AB7C492
     created: 2020-07-01  expires: never       usage: SC
     trust: ultimate      validity: ultimate
ssb  rsa2048/536E30C75D07B654
     created: 2020-07-01  expires: 2022-07-01  usage: E
[ultimate] (1). test@user.com <test@user.com>

gpg>
Обратите внимание, что в выводе 2 ключа - 16901E2B8AB7C492 и 536E30C75D07B654. Переключение между ними производится через директиву key и указанием его идентификатора:

gpg> key 536E30C75D07B654

sec  rsa2048/16901E2B8AB7C492
     created: 2020-07-01  expires: never       usage: SC
     trust: ultimate      validity: ultimate
ssb* rsa2048/536E30C75D07B654
     created: 2020-07-01  expires: 2022-07-01  usage: E
[ultimate] (1). test@user.com <test@user.com>

gpg>
Это требуется для работы с каждым подключем (что особенно важно, к кримеру, при удалении даты истечения ключа)

Шифрование сообщений
Для шифрования данных можно использовать 2 подхода - публичный ключ принимающего или фиксированная passphrase. Первый вариант использует ассимметричный алгоритм шифрования и использует публичный ключ (тогда для расшифровки потребуется приватный ключ), а для второго - симметричный алгоритм, где ключем выступает введенная passphrase

--encrypt --recipient $RECIPIET_ID - позволяет зашифровать сообщение при помощи публичного ключа конкретного ключа
--symmetric - зашифровать при помощи passphrase, которая будет запрошена в интерактивном режиме
Если данным командам передавать в конце имя файла, который требуется зашифровать, то оно и будет зашифрованно. Иначе же можно зашифровать данные, передаваемые через stdin, к примеру, через |

Расшифровка сообщений
Для расшифровки сообщений требуется либо владение приватным ключем, которым был зашифрован файл, либо знание passphrase. В любом случае, расшифровака сообщения производится командой gpg --decrypt с передачей имени зашифрованного файла, либо передачи данных через stdin

Полезные ссылки:
PGP (wikipedia)
GnuPG (archlinux wiki)
OpenPGP Message Format (RFC4880)
WAL-G (github)
Renewing an expired GPG subkey
Что произойдет, если в вашем Linux закончится энтропия
Encrypting and decrypting documents
