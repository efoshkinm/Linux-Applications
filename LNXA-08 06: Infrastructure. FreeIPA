Задание:
На вашем сервере запустите FreeIPA с доступом извне.
Создайте группу webadmins.
Создайте двух пользователей - с правами администратора (siteadmin) и пользователя (user) - через Web UI.
Добавьте пользователя siteadmin в группу webadmins.
На вашем сервере запустите nginx и настройте на нем вход при помощи LDAP параметров, за которыми будут спрятаны 2 location:
/admin/ - статическая страница с текстом "Hello, admin", на которую может заходить пользователь, находящийся в группе webadmins;
/user/ - статическая страница с текстом "Hello, user", на которую может заходить любой пользователь, зарегистрированный в FreeIPA.
Для проверки отправьте URL для доступа к FreeIPA Web UI и защищенным locations, пароли от обоих пользователей к FreeIPA и конфигурационный файл nginx.


****************************************************************************
Решение
****************************************************************************
Ефошкин Максим Вячеславович
ОТПРАВЛЕНО
20.11.2022 00:37
1. На вашем сервере запустите FreeIPA с доступом извне.
 address: 158.160.13.11
 
 mkdir -p /opt/freeipa-data
 
 apt update
 apt install docker.io
 
docker run -it -d --name freeipa --hostname freeipa.efoshkin.ru --volume /opt/freeipa-data/:/data --publish "443:443" --publish "80:80" --publish "389:389" --publish "636:636" --publish "88:88" --publish "88:88/udp" --publish "464:464" --publish "464:464/udp" -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /tmp --security-opt seccomp=unconfined --sysctl net.ipv6.conf.all.disable_ipv6=0 freeipa/freeipa-server:centos-8-4.8.4
 
root@epda1vjq7macji3kojm0:/home/yc-user# docker images
REPOSITORY               TAG              IMAGE ID       CREATED       SIZE
freeipa/freeipa-server   centos-8-4.8.4   7d906ba6bfe4   2 years ago   868MB

Domain: efoshkin.ru
Directory Manager password: Direct_Me
IPA admin password: IPA_admin

kinit admin

# на убунту хосте
vi /etc/hosts 
127.0.0.1  freeipa.efoshkin.ru

# На локальной машние
vi /etc/hosts
158.160.13.11 freeipa.efoshkin.ru

5. На вашем сервере запустите nginx и настройте на нем вход при помощи LDAP параметров, за которыми будут спрятаны 2 location:
apt install nginx
git clone https://github.com/nginxinc/nginx-ldap-auth.git /opt/nginx-ldap-auth
cd /opt/nginx-ldap-auth
 
# Библиотеки питон
docker build -t nginx-ldap-auth-daemon .
docker run -d -p 8888:8888 nginx-ldap-auth-daemon
 
# Чтобы посмотреть правильный путь в ldap к нужной группе или пользователю нужно вывести структуру лдап, подключившись через админа.
ldapsearch -x -b "dc=efoshkin,dc=ru" -H ldap://158.160.13.11:389 -D "uid=admin,cn=users,cn=accounts,dc=efoshkin,dc=ru" -W 

К примеру узнать путь к webadmins
ldapsearch -x -b "dc=efoshkin,dc=ru" -H ldap://158.160.13.11:389 -D "uid=admin,cn=users,cn=accounts,dc=efoshkin,dc=ru" -w IPA_admin | grep webadmins
dn: cn=webadmins,cn=groups,cn=accounts,dc=efoshkin,dc=ru

# for /user
ldapsearch -x -b "dc=efoshkin,dc=ru" -H ldap://158.160.13.11:389 -D "uid=admin,cn=users,cn=accounts,dc=efoshkin,dc=ru" -w IPA_admin | grep ipausers
cn=ipausers,cn=groups,cn=accounts,dc=efoshkin,dc=ru

**************************************
Дальше идет конфиг nginx
**************************************

cat /etc/nginx/sites-enabled/default
server {
	listen 8080 default_server;
	root /var/www/html;
	server_name rebrainme;


	location = /auth {
            internal;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_pass http://127.0.0.1:8888;
            proxy_set_header X-Ldap-URL "ldap://158.160.13.11:389";
            proxy_set_header X-Ldap-BaseDN "dc=efoshkin,dc=ru";
            proxy_set_header X-Ldap-BindDN "uid=admin,cn=users,cn=accounts,dc=efoshkin,dc=ru";
	    proxy_set_header X-Ldap-BindPass "IPA_admin";
	    proxy_set_header X-CookieName "nginxauth";
	    proxy_set_header Cookie nginxauth=$cookie_nginxauth;
            proxy_set_header X-Ldap-Template "(&(uid=%(username)s)(memberOf=cn=webadmins,cn=groups,cn=accounts,dc=efoshkin,dc=ru))";
}

        location  / {
 	    autoindex  on;         
        }

        location  /admin{
            auth_request /auth;
	    error_page 401 =200 /admin;
        }


	location = /user_auth {
            internal;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_pass http://127.0.0.1:8888;
            proxy_set_header X-Ldap-URL "ldap://158.160.13.11:389";
            proxy_set_header X-Ldap-BaseDN "dc=efoshkin,dc=ru";
            proxy_set_header X-Ldap-BindDN "uid=admin,cn=users,cn=accounts,dc=efoshkin,dc=ru";
            proxy_set_header X-Ldap-BindPass "IPA_admin";
            proxy_set_header X-CookieName "nginxauth";
	    proxy_set_header Cookie nginxauth=$cookie_nginxauth;
            proxy_set_header X-Ldap-Template "(&(uid=%(username)s)(memberOf=cn=ipausers,cn=groups,cn=accounts,dc=efoshkin,dc=ru))";

}
	location  /user {
            auth_request /user_auth;
	    error_page 401 =200 /user;
        }

}

Проверка
http://158.160.13.11:8080/
Пароли
admin       IPA_admin
siteadmin  IPA_admin
user           user

ОТВЕТ КУРАТОРА
Алексей Кузнецов (@Hystrix)
ВЫПОЛНЕНО 5
20.11.2022 20:09
Добрый день!

По итогам обсуждения:

в контейнере всегда свой loopback/127.0.0.1. Если скрипт запущен в контейнере, то при передачи ему URL'а к FreeIPA через заголовок нельзя было использовать Loopback, т.к. он обращался не к loopback хоста, а к своему собственному. Рабочее решение - внешний IP. Есть еще вариант работы через имя контейнера, но тогда они должны быть в одной сети докера
шаблон (&(uid=%(username)s)
возможное зацикливание запросов через proxy_pass
Отличные знание темы и выполнение задания, хорошо что доводите задание до решения, замечаний и вопросов нет!



*****************************************************************************
Теория
*****************************************************************************


LNXA-08 06: Infrastructure. FreeIPA
Описание:
В этом задании мы отойдем с вами от вопросов ограничения приложений и обратимся к вопросу ограничения и контроля доступа пользователей - данный вопрос также важен, как и ограничение ресурсов для нагрузок, а иногда даже более важен.

Как правило, контроль доступа производится при помощи централизованной системы, отвечающей не только за вопросы аутентификации (подтверждение аккаунта через вход в систему), но и за вопросы авторизизации (подтверждение полномочий). Эту связку называют Identity and Access.

Примерами таких систем можно назвать проприетарный Microsoft Active Directory и OpenSource проект, курируемый компанией RedHat, FreeIPA (Identity, Policy and Access), который мы и будет рассматривать в рамках данного задания.

Казалось бы, зачем усложнять? Запустил сервис, создал одну учетную запись с полным доступом на всех и выдал людям общие данные - задача выполнена. Однако такой подход может работать, когда у вас в компании человек 10 и вы всех знаете очень хорошо. В ситуации, когда в вашей компании человек больше - всегда может найтись тот, кто что-нибудь поломает.

Перед тем как мы разберем, что из себя представляет FreeIPA изнутри, посмотрим, какие функции он должен выполнять:

Аутентификация - FreeIPA предоставляет централизованную систему, которая хранит информацию о данных входа пользователей. Это, как правило, - связка логин-пароль, однако также возможно введение дополнительного фактора аутентификации в виде одноразового пароля (One Time Password). Это позволяет пользователям не запоминать большое количество паролей, а всего один - от нашей системы, через которую и будет проходить вход во все, но об этом пользователям знать и не нужно (часто пользователи все равно пользуются одним паролем, но уже по соображениям «зачем запоминать больше одного пароля?»).
Авторизация - осуществляется за счет добавления пользователей в группы, к которым могут быть привязаны конкретные полномочия (к примеру, возможность просмотра всех пользователей), на их базе можно управлять уровнем доступа пользователей в системе.
Политики - позволяет задать требования к пользователям (к примеру, частоту смены и требования к паролям) или к хостам (позволяет контролировать, кто может заходить на сервер или управлять конфигурацией приложений на серверах).
В зависимости от потребностей вы можете пользоваться тем или иным набором возможностей FreeIPA. К примеру, если вам нужно просто сделать централизованную систему входа - для вас может быть достаточно всего лишь использовать возможности аутентификации. Однако если вы, кроме того, хотите управлять доступом к конкретным приложениям, вы также можете воспользоваться фактором авторизации и разделить пользователей по группам с разными возможностями. Самое важное то, что в любом сценарии у вас остается инструмент, через который вы сможете, как администратор, давать или отзывать доступ без необходимости переключаться из одной системы в другую.

Архитектура FreIPA

Прелестью FreeIPA является ее компонентность - она полностью построена на открытых проектах, управляемых через одно веб-приложение, каждый из которых привносит свои возможности в решение:

389 Directory Server - представляет собой LDAP сервер, на базе которого реализуется аутентификация и авторизация пользователей. Именно с ней общаются сторонние приложения, которые реализуют централизованную аутентификацию (о том, как это происходит - разберем далее).
MIT Kerberos - открытая реализация Kerberos сервера, суть которого сводится к получению так называемого Kerberos Ticker - временной сущности, которая подтверждает вашу личность при использовании систем, заточенных на работу с этим методом аутентификации.
NTP - отвечает за синхронизацию времени на хостах по протоколу Network Time Protocol. Это необходимо для корректной работы сторонних сервисов и серверов в случае конфигурации методов аутентификации, которые чувствительны к времени.
DNS - позволяет запустить свой DNS сервер, управление записями которого будет производиться через Web-интерфейс для привязки к конкретным хостам для дальнейшего применения политик.
Dogtag - система управления сертификатами, которая позволяет создавать сертификаты под различные цели внутри инфраструктуры, такие как TLS сертфикаты, которые можно использовать для установки в HTTPS (Certificate System).
Конфигурация каждой из этих компонент достойна отдельной задачи, однако особенностью FreeIPA является то, что она за вас в процессе установки производит конфигурацию всех компонент до работающего и оптимального состояния.

Проблемой FreeIPA является тот факт, что он привязан исключительно к RHEL подобным дистрибутивам. Однако благодаря Docker, с которым мы с вами познакомились ранее, мы можем это обойти, просто запустив контейнер со всем необходимым в любой системе - как Linux, так и, если требуется, Windows или Mac OS X.

Для этого существует официальный образ с подробной инструкцией, как запустить сервер (ссылку на страницу которого мы добавим) - к ней вам и придется прибегнуть в ходе выполнения этого задания. Общий формат запуска следующий (примечание: возможно, в будущем команда может немного поменяться, поэтому в случае возникновения проблем обращайтесь к описанию образа):

docker run -it --rm \
	--name freeipa.test.local \
	--hostname freeipa.test.local \
	--volume /opt/freeipa-data/:/data \
	--publish "443:443" \
	--publish "80:80" \
	--publish "389:389" \
	--publish "636:636" \
	--publish "88:88" \
	--publish "88:88/udp" \
	--publish "464:464" \
	--publish "464:464/udp" \
	-v /sys/fs/cgroup:/sys/fs/cgroup:ro \
	--tmpfs /run \
	--tmpfs /tmp \
	--security-opt seccomp=unconfined \
	--sysctl net.ipv6.conf.all.disable_ipv6=0 \
	freeipa/freeipa-server:centos-8-4.8.4
Разберем параметры запуска, поскольку они многое говорят о том, что требуется и как обращаться к FreeIPA:

Порты:
443 - HTTPS для доступа в Web UI, будет использовать самоподписанный сертификат;
80 - HTTP для тех же целей, который по факту используется для редиректа на HTTPS порт;
389 - LDAP сервер;
636 - LDAP сервер с TLS;
88 - Kerberos сервер для аутентификации;
464 - Kerberos для задания/смены пароля.
После запуска контейнера от вас потребуется произвести ряд действий в интерактивном режиме, после чего ваш сервер будет сконфигурирован и готов к постоянному запуску в режиме демона, где вы сможете обратиться к нужным вам портам. Кроме того, указанный домен должен поддерживаться в вашей системе - либо при помощи DNS, либо при помощи записи в /etc/hosts.

Важно заметить то, что при конфигурации указывается пароль для двух пользователей - admin и Directory Manager. Первый связан больше с сущностями IPA (такие как WebUI), в то время как последний - скорее с LDAP, поэтому необходимо иметь доступ к обеим учетным записям.

Общение с FreeIPA производится двумя основными методами - через Web-интерфейс, который покрывает основные задачи, и через CLI утилиту ipa. Кроме того, возможно взаимодействие и с отдельными компонентами, входящими в состав FreeIPA - к примеру, LDAP, что мы и разберем позднее.

Веб-интерфейс FreeIPA позволяет выполнять все наиболее частые задачи, такие как работа с пользователями, сертификатами, нодами. Так, первая операция, которую стоит сделать после запуска вашего сервера, - создать собственного пользователя, чтобы не производить все действия от единственного пользователя admin.

FreeIPA Web UI

Веб-интерфейс разделен на 5 основных разделов:

Identity - позволяет управлять пользователями, группами и хостами.
Policy - управление политиками доступа в sudo (требует дополнительной настройки на хостах), паролей (как часто менять пароли, какое количество парольных групп использовать).
Authentication - позволяет произвести генерацию токенов одноразовых паролей и сертификатов.
Network Services - позволяет определить правила для автоматического подключения директорий (требует допольнительной настройки на хостах).
IPA Server - управление конфигурацией сервера, а также политиками доступа, которые можно давать пользователям.
Часто именно первый раздел и используется в большинстве инсталляций, поскольку он позволяет производить централизованное управление пользователями, однако и другие возможности при необходимости будут вас ждать (к примеру, создание PKI инфраструктуры через раздел Authentication).

Все те же действия, что производятся через веб-интерфейс, можно производить и через консольную утилиту (CLI) утилиты ipa. Данный метод может быть удобен при автоматизации определенных задач. Однако в рамках этого задания с данной утилитой мы знакомиться не будем, а перейдем к тому, как работать с другой, не менее важной компонентой FreeIPA - LDAP.

Как мы и говорили ранее, LDAP как протокол используется для аутентификации пользователей, однако, кроме этого, его можно использовать для хранения информации о сущностях, которые хранятся в базе данных, такие как номера телефонов, e-mail, имя любимой собаки - все, что настроена хранить эта база данных. И данная база заточена под хранение информации, привязанной к реальным сущностям, - людям, серверам, отделам. В отличие от реляционной базы данных LDAP хранит всю информацию в виде дерева:

LDAP дерево

Для работы с LDAP существуют утилиты, начинающиеся на ldap.... Пример, который мы будем рассматривать, - ldapsearch. Данная утилита позволяет производить поиск в дереве по атрибутам сущностей. То есть, она позволяет искать пользователей по имени, фамилии, адресу почты, кличке собаки и прочим данным, которые у них есть. Пример запроса:

ldapsearch \
	-D "cn=exampleuser,dc=example,dc=com" \
	-w secret \
	-p 389 \
	-h server.example.com \
	-b "dc=example,dc=com" \
	-s sub "(mail=*)"
Данный запрос подключается к LDAP серверу server.example.com, слушающему на порту 389 под идентификатором cn=exampleuser,dc=example,dc=com с паролем secret, и производит запрос на уровне dc=example,dc=com о пользователях, у которых заполнено поле mail.

Думаю, у вас возникает вопрос - а зачем мне, собственно, база данных с информацией о пользователях, когда мне нужно просто произвести аутентификацию пользователей? Такая база данных нужна за счет гибкости использования и возможности поиска пользователей. Для того, чтобы понять это, нужно рассмотреть, как работает аутентификация по протоколу LDAP:

Пользователь производит запрос в сервис, в котором настроена аутентификация через LDAP.
Сервис обращается со своими данными для подключения к LDAP и производит запрос - есть ли у вас пользователь, который подходит под такой фильтр (фильтрация, как правило, производится по нескольким параметрам - соответствие UID и присутствие в определенной группе).
LDAP сервер возвращает список найденных записей.
Если записи найдены, значит, пользователя можно пробовать аутентифицировать с его данными - буквально производится запрос к LDAP серверу с теми данными, что прислал пользователь.
Если запрос успешен, то пользователь ввел верные данные и мы можем предоставить ему доступ к сервису.
Может показаться, что ради такой простой вещи, как аутентификация, использовать отдельную базу данных расточительно, однако из-за хранения большого количества дополнительной информации мы можем расширять возможности пользователей. Так, если в нашей системе есть несколько групп (к примеру, admin и user), то мы, добавляя пользователей в группу или удаляя их из группы, можем контролировать полномочия в сервисе из одного места, а не переходя из системы в систему, что при задаче организации централизованной системы контроля доступа - основополагающий принцип.

Как раз для взаимодействия с LDAP и создавался пользователь Directory Manager - он является суперпользователем в базе данных и от его имени возможно производить любые запросы.

Для работы с LDAP рекомендуется использовать браузер, чтобы облегчить себе общение с этим инструментом. Наиболее стабильным решением является Apache Directory Studio, доступный на любой операционной системе.

На этом мы закончим знакомство с FreeIPA, однако тема эта очень большая и позволит при глубоком изучении решить такие вещи, как:

организация PKI (Public Key Infrastructure);
ограничение доступа путем создания сервисных пользователей;
управление доступом к хостам;
привязка сторонних сервисов к централизованной системе входа (RADIUS).
Полезные ссылки:
В чем состоит разница между аутентификацией и авторизацией
Структура хранилища Active Directory
FreeIPA (official site)
Двухфакторная аутентификация: что это и зачем оно нужно?
IPAv3 Arhcitecture (FreeIPA docs)
LDAP (rus wikipedia)
Kerberos (archlinux wiki)
Network Time Protocol daemon
CLI overview (FreeIPA docs)
FreeIPA server container
HowTo/LDAP
LDAP Query Examples
Инструменты LDAP
Apache Directory Studio
Система централизованного управления авторизацией пользователей на FreeIPA в Docker
Nginx + LDAP авторизация
