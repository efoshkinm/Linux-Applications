Задание:
Для своего пользователя на сервере сделайте возможность для работы с libvirt от имени непривилегированного пользователя (команду и вывод сохраните).
Подключитесь к гипервизору на вашем сервере по SSH из утилиты virt-manager.
При помощи virt-manager запустите на вашем сервере виртуальную машину с Ubuntu Server под именем rebrainme-ubuntu (сделайте скриншот запущенной виртуальной машины).
С самого сервера при помощи утилиты virsh выведите список всех виртуальных машин (команду и вывод сохраните).
Остановите и удалите виртуальную машину при помощи virsh (команды и вывод сохраните).
На проверку отправьте ссылку на скриншот запущенной виртуальной машины, все команды и выводы команд.



****************************************************************************
Решение
****************************************************************************

Ефошкин Максим Вячеславович
ОТПРАВЛЕНО
15.11.2022 11:18
1. Для своего пользователя на сервере сделайте возможность для работы с libvirt от имени непривилегированного пользователя (команду и вывод сохраните).
address: 84.201.139.151
sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils

usermod -aG libvirt yc-user
2. Подключитесь к гипервизору на вашем сервере по SSH из утилиты virt-manager.
virt-manager -c 'qemu+ssh://yc-user@84.201.139.151/system'

3. При помощи virt-manager запустите на вашем сервере виртуальную машину с Ubuntu Server под именем rebrainme-ubuntu (сделайте скриншот запущенной виртуальной машины).
 virt-manager --show-domain-creator -c 'qemu+ssh://yc-user@84.201.139.151/system'
 Скрин виртуалки
 https://disk.yandex.ru/i/YNEdzBaeJjqizQ
4. С самого сервера при помощи утилиты virsh выведите список всех виртуальных машин (команду и вывод сохраните).
 root@epdc9jheqaukcji50sr5:/home/yc-user# virsh list
 Id   Name               State
----------------------------------
 3    rebrainme-ubuntu   running
 
5. Остановите и удалите виртуальную машину при помощи virsh (команды и вывод сохраните).
# Останавливаем домен
 root@epdc9jheqaukcji50sr5:/home/yc-user# virsh destroy rebrainme-ubuntu
Domain rebrainme-ubuntu destroyed

# Удаляем
root@epdc9jheqaukcji50sr5:/home/yc-user# virsh undefine rebrainme-ubuntu
Domain rebrainme-ubuntu has been undefined

root@epdc9jheqaukcji50sr5:/home/yc-user# virsh list --all
 Id   Name   State
--------------------

Удаляем образ
rm -rf /var/lib/libvirt/images/rebrainme-ubuntu.qcow2 

 
ОТВЕТ КУРАТОРА
Алексей Кузнецов (@Hystrix)
ВЫПОЛНЕНО 4
16.11.2022 09:01
Добрый день!

Очень хорошо, одно уточнение:

Удаляем образ
rm -rf /var/lib/libvirt/images/rebrainme-ubuntu.qcow2 
можно реализовать через undefine вместе с удалением машины.
16.11.2022 09:53
ВЫПОЛНЕНО 5
Ефошкин Максим Вячеславович
ОТПРАВЛЕНО
16.11.2022 09:53
virsh undefine rebrainme-ubuntu --remove-all-storage 
ОТВЕТ КУРАТОРА
Алексей Кузнецов (@Hystrix)
ВЫПОЛНЕНО 5
16.11.2022 10:18
Добрый день!

Отличные знание темы и выполнение задания, замечаний и вопросов нет!


*****************************************************************************
Теория
*****************************************************************************


LNXA-08 04: Infrastructure. Libvirt
Описание:
Продолжая тему разделения ресурсов на серверах, в данном задании мы рассмотрим более продвинутый вариант - виртуализацию - а также инструмент для работы с различными системами виртуализации - Libvirt.

Начнем, как полагается, с теории. А точнее - с теории о том, что такое виртуализация.

Данный метод разделения ресурсов позволяет запускать на одной физической вычислительной единице (так называемая хост-машина) несколько виртуальных (виртуальных машин). Эти машины обладают своими ограниченными ресурсами, которые выделяются из имеющегося объема ресурсов физической машины. Данный метод позволяет запускать практически любую операционную систему, с которой можно работать так, если бы это была совершенно отдельная физическая машина.

Этот метод широко распространен как в пользовательских, так и в бизнес-задачах, где покупают ограниченное количество физических серверов с большим количеством ресурсов, а далее администратор использует их для создания виртуальных машин с гораздо меньшими ресурсами под конкретные задачи - тестовые сервера, сервера баз данных, под приложения и многие-многие другие.

Инструмент, который позволяет запускать виртуальные машины, называется гипервизором. Существует не очень большое количество гипервизоров - некоторые из них доступны в любой операционной системе (VirtualBox), но есть и те, которые доступны исключительно в рамках одной операционной системы (KVM). Каждый гипервизор имеет свои инструменты для работы с ним и возможности, которые могут отличать одно решение от другого.

С инструментом этого типа, как вы могли догадаться, мы уже знакомы с первого задания - именно через него вы запускали рабочую виртуальную машину, в которой выполняли задания.

Существуют разные виды виртуализации:

Эмуляция - позволяет запускать приложения одной архитектуры процессора на совершенно другой.
Аппаратная виртуализация - этот метод сейчас наиболее распространен ввиду необходимости запуска приложений под разные операционные системы. Так, к примеру, если у вас физические сервера на Linux, но вам требуется запускать Microsoft Active Directory для домена вашей компании, это можно легко реализовать, запустив виртуальную машину с Microsoft Server. Таким образом вам не потребуется приобретать отдельный физический сервер под такую задачу. При этом архитектура процессора, под которой работает конкретная операционная система, может как отличаться, так и совпадать (что на данный момент часто актуальнее ввиду повсеместного распространения архитектуры процессора x86).
Последний метод может работать как с ускорением на уровне процессора, так и без него. Такая возможность у каждого производителя называется по-своему, но суть остается одна - процессор помогает гипервизору запускать виртуальные машины, расчитанные на ту же архитектуру процессора, через специальные инструкции, практически без накладных затрат на выполнение.

Преимущества данного метода:

возможность получить максимально независимую в работе операционную систему;
количество используемых ресурсов жестко ограничено и не может превышать установленных порогов;
возможность более плотно и эффективно использовать ресурсы физических серверов.
Недостатки метода:

Мы не можем избавиться на все 100% от накладных затрат (хотя текущие процессоры и близки к этому). Так, к примеру, расчеты на CPU все равно производятся за немного бОльшее время, чем на железном сервере.
Нужно жестко следить за доступными для выделения ресурсами, чтобы не перегрузить систему.
В Linux основным гипервизором является Kernel-based Virtual Machine/QEMU (часто называемый просто KVM). Он позволяет выполнять роль эмуляции (QEMU), но имеет в своем составе модуль ядра для работы в режиме аппаратной виртуализации (KVM), который и представляет основной интерес для большинства пользователей.

KVM позволяет запускать виртуальные машины той же архитектуры и транслировать запросы процессора при помощи аппаратной поддержки процессоров (технологии Intel VT или AMD-V). Естественно, процессоры для работы с этими технологиями должны иметь такую возможность (эту информацию можно узнать через /proc/cpuinfo - по наличию флага vmx или svm для Intel и AMD, соответственно).

В случае же, если ваша система не поддерживает эту технологию, модуль KVM не будет использоваться и вся виртуализация будет производиться силами QEMU за счет обычных вычислительных ресурсов процессора, что приведет к ощутимому падению производительности.

У QEMU есть возможность запуска виртуальных машин при помощи CLI инструментов (к примеру, qemu-system-x86_64 позволяет запускать виртуальные машины архитектуры x86). Однако, как правило, ввиду потенциально большого количества параметров (qemu-system-x86_64 --help | wc -l # 495), требуемых для запуска, таким методом виртуальные машины не запускают, а прибегают к помощи библиотек/утилит обвязок.

Самой распространенной библиотекой, которая позволяет управлять виртуальными машинами для Linux, является libvirt. Она предоставляет удобный единый интерфейс для работы с различными гипервизорами и компонентами, связанными с ними (такими как сетевые интерфейсы и хранилище).

Libvirt состоит из нескольких основных компонент:

Демон (libvirtd) - отвечает за обработку команд и исполнение конкретных действий с сущностями.
API - позволяет общаться с демоном по конкретному протоколу, который должны поддерживать клиенты.
CLI утилита (virsh) - позволяет общаться с демоном.
В понятии Libvirt любая запущенная виртуальная сущность (будь то виртуальная машина или контейнер) называется доменом (domain) - этим термином мы и будет оперировать далее.

Инструментом, через который будет производиться большинство действий с libvritd, является virsh - он позволяет производить все возможные действия с доменами, а также со связанными сущностями, такими как хранилища и сетевые устройства.

Утилита может работать в командном режиме - в этом случае вы передаете полную команду (к примеру, virsh list) либо в интерактивном (в который можно попасть, просто введя команду virsh). Первый метод удобен, когда требуется выполнять какие-то автоматизированные задачи (например, в составе скриптов), в то время как второй - при ручных действиях, с автодополнением и отдельной от основной командной оболочки историей.

Libvirtd хранит определения доменов в декларативной форме в XML-файлах в директории /etc/libvirt вместе с конфигурационными файлами для всех своих драйверов. Эти определения можно использовать для переноса доменов с одного сервера на другой, а также для создания других доменов. Данный формат довольно гибкий, но слишком объемен для изучения. К счастью, благодаря инструментам, с которыми мы познакомимся далее, прибегать к документации приходится не так часто.

Разберем наиболее используемые команды virsh:

list - вывести список доменов (выводит по умолчанию только активные, но можно вывести все при помощи флага --all);
autostart - позволяет настроить домен на автоматический запуск после запуска хостовой системы;
console - подключиться к консоли домена (важно - к текстовой консоли, то есть графического режима не может быть);
create - создать домен из XML-файла домена;
shutdown - мягкое выключение домена;
destroy - остановить домен принудительно (да, название немного пугающее, но уж какое есть);
dumpxml - сохранить конфигурационный файл домена, который можно использовать в дальнейшем для создания новых доменов;
edit - открыть в редакторе конфигурацию домена;
migrate - позволяет перевести домен с одного хоста на другой с libvirtd (вплоть до возможности живой миграции - то есть без выключения - при определенных условиях);
reboot - перезагрузить домен по-мягкому (аналогично программному выключению);
reset - жесткий перезапуск домена (аналогичен перезапуску нажатием клавиши, то есть без окончания работы чего-либо);
save - сохранить состояние домена в файл с остановкой;
restore - восстановить состояние домена из файла;
suspend - приостановить домен (он перестает обрабатывать запросы, но продолжает использовать оперативную память для сохранения состояния);
resume - вернуть домен в рабочее состояние из приостановленного.
Данных команд, как правило, хватает для администрирования существующих доменов. Однако директива virsh create принимает на вход путь к XML-файлу с описанием домена, но не предоставляет механизма генерации XML, поэтому создание файлов с нуля довольно проблематично.

Кроме 3 основных компонент, существуют еще и сторонние клиенты, которые позволяют реализовать те же задачи, но, к примеру, в графическом режиме или решают те задачи, которые не решены из коробки в самом libvirt. Примеры:

virt-install - решает вопрос генерации доменов для установки в них системы. Как правило, идет вкупе с инструментом virt-viewer, который позволяет подключиться к консоли для взаимодействия с системой на этапе установки.
virt-manager - позволяет подключаться к разным libvirt демонам и взаимодействовать с существующими доменами в режиме графического интерфейса. Вместе с SSH этот инструмент позволяет управлять из одного окна несколькими серверами.
По умолчанию libvirtd работает только от имени суперпользователя, однако можно разрешить другим пользователям работать с демоном при помощи клиентов. Для этого нужно добавить этого пользователя в группу, от имени которой запускается демон. Для Ubuntu данная группа называет libvirt. Хотя добавление и предоставит некоторые возможности (к примеру, создание доменов), часть функциональности все равно остается доступной лишь суперпользователю.

В конце хотелось бы отметить, что Libvirtd, как мы упоминали ранее, позволяет работать не только с KVM, но и поддерживает другие гипервизоры. Из интересных для нас на данном этапе стоит упомянуть VirtualBox, VMWare Workstation и LXC.

Полезные ссылки:
KVM (wikipedia)
KVM (xgu)
KVM (archlinux wiki)
Linux Tip: How to Tell if Your Processor Supports VT
Libvirt (wikipedia)
libvirt (archlinux wiki)
Domain XML format (libvirt docs)
Virtual Machine Manager (virt-manager)
LXC (ubuntu rus docs)
