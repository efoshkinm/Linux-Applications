Задание:
Написать и предоставить конфигурацию HAProxy для трех серверов веб-приложения со следующими условиями:
должно быть включено и использоваться SSL-подключение;
должны пересылаться базовые заголовки запроса;
должны обрабатываться коды ошибок;
должна быть включена статистика работы HAProxy.
Предоставить конфигурационный файл.

****************************************************************************
Решение
****************************************************************************
Ефошкин Максим Вячеславович
ОТПРАВЛЕНО
03.10.2022 22:32
1. Написать и предоставить конфигурацию HAProxy для трех серверов веб-приложения со следующими условиями:
должно быть включено и использоваться SSL-подключение; должны пересылаться базовые заголовки запроса; должны обрабатываться коды ошибок; должна быть включена статистика работы HAProxy.

address: 84.201.176.80
Установка
https://haproxy.debian.net/

 apt-get install --no-install-recommends software-properties-common
 add-apt-repository ppa:vbernat/haproxy-2.6
 apt-get install haproxy=2.6.\*
 
Проверка
root@epd0uhr4njev53tg1t5f:/home/yc-user# haproxy -v
HAProxy version 2.6.6-1ppa1~focal 2022/09/22 - https://haproxy.org/
Status: long-term supported branch - will stop receiving fixes around Q2 2027.
Known bugs: http://www.haproxy.org/bugs/bugs-2.6.6.html
Running on: Linux 5.4.0-124-generic #140-Ubuntu SMP Thu Aug 4 02:23:37 UTC 2022 x86_64
root@epd0uhr4njev53tg1t5f:/home/yc-user# 


root@epd0uhr4njev53tg1t5f:/home/yc-user# cd /etc/haproxy/
root@epd0uhr4njev53tg1t5f:/etc/haproxy# ll
total 16
drwxr-xr-x  3 root root 4096 Oct  1 20:38 ./
drwxr-xr-x 79 root root 4096 Oct  1 20:38 ../
drwxr-xr-x  2 root root 4096 Oct  1 20:38 errors/
-rw-r--r--  1 root root 1285 Sep 22 20:35 haproxy.cfg
root@epd0uhr4njev53tg1t5f:/etc/haproxy# 



2. Конфиг
root@epd0uhr4njev53tg1t5f:/etc/haproxy# cat haproxy.cfg 
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend www.mysite.com
    bind 10.0.0.3:80
    bind 10.0.0.3:443 ssl crt /etc/ssl/certs/mysite.pem
    http-request redirect scheme https unless { ssl_fc }
    use_backend api_servers if { path_beg /api/ }
    default_backend web_servers

backend web_servers
    balance roundrobin
    cookie SERVERUSED insert indirect nocache
    option httpchk HEAD /
    default-server check maxconn 40
    server server1 10.0.1.3:80 cookie server1
    server server2 10.0.1.4:80 cookie server2
    server server2 10.0.1.5:80 cookie server3
root@epd0uhr4njev53tg1t5f:/etc/haproxy# 

listen stats
    bind *:8404
    stats enable
    stats uri /monitor
    stats refresh 5s
ОТВЕТ КУРАТОРА
Алексей Кузнецов (@Hystrix)
ВЫПОЛНЕНО 5
04.10.2022 15:47
Добрый день!

Отличные знание темы и выполнение задания, замечаний и вопросов нет!



*****************************************************************************
Теория
*****************************************************************************

LNXA-07 01: Network. HAproxy
Описание:
HAProxy (прокси высокой доступности) - это балансировщик с открытым исходным кодом, который может балансировать нагрузку любой TCP-службы. HAProxy - бесплатное, очень быстрое и надежное решение, которое предлагает балансировку нагрузки, высокую доступность и прокси для приложений на основе TCP и HTTP. Он особенно хорошо подходит для веб-сайтов с очень высоким трафиком и используется на крупных сайтах, таких как Github, StackOverflow, Reddit, Tumblr, Twitter и других.

Терминология HAProxy
Есть много терминов и понятий, которые важны при обсуждении балансировки нагрузки и проксирования. Мы рассмотрим наиболее часто используемые термины в следующих подразделах и, прежде чем перейдем к базовым типам балансировки нагрузки, мы поговорим о ACL, бэкендах и внешних интерфейсах.

Список контроля доступа (ACL)
В отношении балансировки нагрузки ACL используются для проверки некоторого условия и выполнения действия (например, выбора сервера или блокировки запроса) на основе результата теста. Использование ACL-списков позволяет гибкую пересылку сетевого трафика на основе множества факторов, таких как, например, сопоставление с образцом и количество подключений к бэкенду.

Пример ACL: acl url_api path_beg /api

Этот ACL совпадает, если путь запроса начинается с /api, т.е. это будет соответствовать такому запросу, как http://contoso.com/api/endpoint-1. Детальное описание правил можно найти в руководстве по использованию, в разделе ACL.

Backend
Backend — это набор серверов, которые получают перенаправленные запросы, они определяются в бэкенд-разделе конфигурации HAProxy. В базовом варианте бэкенд определяется следующим образом:

выбор алгоритма балансировки;
список серверов и портов.
Бэкенд может содержать в себе один или несколько серверов. И в общем случае, это и является прямым назначением HAProxy — добавление большего количества серверов, для того чтобы увеличить потенциальную емкость нагрузки путем распределения ее на несколько серверов. Плюс таким же образом достигается повышение надежности на случай, если некоторые из внутренних серверов станут недоступными.

Пример конфигурации с двумя бэкендами: веб-бэкенд и API-бэкенд с двумя серверами в каждом, прослушивающими порт 80:

backend web-backend
    balance roundrobin
    server web1 web1.contoso.com:80 check
    server web2 web2.contoso.com:80 check

backend api-backend
    balance roundrobin
    mode http
    server api1 api1.contoso.com:80 check
    server api2 api2.contoso.com:80 check
Frontend
Frontend определяет IP-адреса и порты, к которым могут подключаться клиенты, то есть, по сути, определяет внешний интерфейс подключения и состоит из следующих компонентов:

набор IP-адресов и порт (например, 172.16.35.12:80, *:443 и т.д);
ACL-правила use_backend, которые определяют, какие бэкенды использовать в зависимости от условий ACL;
правило default_backend, которое обрабатывает все остальные случаи.
Пример конфигурации:

frontend contoso.com
    bind 172.16.35.12:80
    use_backend api_servers if { path_beg /api/ }
    default_backend web_servers
Типы балансировки нагрузки
Теперь, когда у нас есть понимание основных компонентов, которые используются при балансировке нагрузки, давайте перейдем к основным типам балансировки.

Работа без балансировки. Простая схема работы приложения, когда запрос пользователя проходит напрямую к единственному серверу приложения. Соответственно, если он выйдет из строя, то приложение перестанет работать. Кроме того, если многие пользователи пытаются получить доступ к вашему серверу одновременно и он не справится с нагрузкой, они смогут работать медленно или вообще не смогут подключиться.
Балансировка нагрузки на четвертом уровне TCP. Простейшим способом балансировки нагрузки сетевого трафика на несколько серверов является использование балансировки нагрузки на четвертом (транспортном) уровне. Распределение нагрузки таким образом будет перенаправлять пользовательский трафик в зависимости от диапазона IP и порта (т.е. если поступит запрос для http://contoso.com/api, то трафик будет перенаправляться на сервер, который обрабатывает все запросы для contoso.com на 80 порту). Схема выглядит следующим образом: пользователь получает доступ к балансировщику нагрузки, который перенаправляет запрос в бэкенд-группу серверов приложений. Какой бы сервер бэкенд не был выбран, он будет отвечать непосредственно на запрос пользователя. Как правило, все серверы в веб-интерфейсе должны обслуживать идентичный контент, иначе пользователь будет получать разные данные.
Балансировка нагрузки на седьмом уровне. Другим, более сложным способом балансировки нагрузки сетевого трафика является использование балансировки на седьмом (прикладном) уровне. Использование седьмого уровня позволяет балансировщику пересылать запросы на разные внутренние серверы на основе содержимого пользовательского запроса. Этот режим балансировки нагрузки позволяет запускать несколько сайтов или серверов приложений на одном домене и порту. В этой схеме, если пользователь запрашивает contoso.com/api, он перенаправляется на ту часть серверов, которая обслуживаем именно API-запросы. При этом другие запросы могут перенаправляться, например, в веб-бэкенд, который может обслуживать обычный сайт.
Алгоритмы балансировки нагрузки
Используемый алгоритм балансировки нагрузки определяет, какой сервер в бэкенде будет выбран при балансировке нагрузки. HAProxy предлагает несколько вариантов алгоритмов, причем в дополнение к алгоритму распределения нагрузки серверам может быть назначен весовой параметр для управления частотой выбора сервера относительно других. Поскольку HAProxy предоставляет достаточно большое количество алгоритмов распределения нагрузки, мы рассмотрим только некоторые из них.

roundrobin — Round Robin, алгоритм, который выбирает серверы по очереди, является алгоритмом по умолчанию.
lessconn — алгоритм выбирает сервер с наименьшим количеством соединений - рекомендуется для длительных сеансов.
source — этот алгоритм выбирает, какой сервер использовать, основываясь на хеш-адресе исходного IP-адреса, то есть IP-адреса пользователя, это один из способов гарантировать, что пользователь будет подключаться к одному и тому же серверу.
Проверка работоспособности (health check)
Кроме всего прочего, HAProxy использует проверку работоспособности, чтобы определить, доступен ли внутренний сервер для обработки запросов. Это позволяет избежать необходимости вручную удалять сервер из конфигурации, если он становится недоступным. Проверка работоспособности по умолчанию заключается в попытке установить TCP-соединение с сервером, т.е. происходит проверка, прослушивает ли внутренний сервер заданные IP-адрес и порт. Если сервер не проходит проверку работоспособности и, следовательно, не может обслуживать запросы, то он автоматически отключается в бэкенде, и трафик не будет перенаправляться на него, пока он снова не станет работоспособным. Если же все серверы в бэкенде выйдут из строя, то приложение или сервис станет недоступно, пока хотя бы один из этих бэкенд-серверов снова не станет работоспособным.

SSL-терминирование
В нынешних условиях работы мы должны обеспечивать не только доступность сервисов, но и шифрование канала связи до сервера. HAProxy также поддерживает данный вариант работы и может принимать шифрованные подключения. Все, что нам нужно для включения режима шифрования, это указать соответствущие директивы, как в примере ниже:

frontend contoso.com
    bind 10.0.0.3:80
    bind 10.0.0.3:443 ssl crt /etc/ssl/certs/mysite.pem
    default_backend web_servers
Полезные ссылки:
The Four Essential Sections of an HAProxy Configuration
HAProxy Starter Guide

